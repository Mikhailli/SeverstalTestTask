<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Color x:Key="Gray">#FF9E9E9E</Color>
    <Color x:Key="LightGray">#FFF3F3f3</Color>
    <Color x:Key="Orange">#FFF38E30</Color>
    <Color x:Key="MediumOrange">#FFF5A356</Color>
    <Color x:Key="MediumLightOrange">#FFF9CA9F</Color>
    <Color x:Key="LightOrange">#FFFBE5D0</Color>
    <Color x:Key="Black">#FF242425</Color>
    <Color x:Key="Red">#FFE74C3C</Color>


    <SolidColorBrush x:Key="GrayBrush" Color="{StaticResource Gray}"/>
    <SolidColorBrush x:Key="LightGrayBrush" Color="{StaticResource LightGray}"/>
    <SolidColorBrush x:Key="OrangeBrush" Color="{StaticResource Orange}"/>
    <SolidColorBrush x:Key="OrangeMediumBrush" Color="{StaticResource MediumOrange}"/>
    <SolidColorBrush x:Key="OrangeMediumLightBrush" Color="{StaticResource MediumLightOrange}"/>
    <SolidColorBrush x:Key="OrangeLightBrush" Color="{StaticResource LightOrange}"/>
    <SolidColorBrush x:Key="BlackBrush" Color="{StaticResource Black}"/>
    <SolidColorBrush x:Key="RedBrush" Color="{StaticResource Red}"/>

    <FontFamily x:Key="FontMain">Segoe UI Light</FontFamily>
    <FontFamily x:Key="Font">PT Sans</FontFamily>
    <FontFamily x:Key="FontSemilight">Segoe UI Semilight</FontFamily>

    <Style x:Key="BigTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontFamily" Value="{StaticResource FontMain}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontStretch" Value="Normal"/>
        <Setter Property="Margin" Value="4"/>
    </Style>

    <Style x:Key="MediumTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BigTextBlockStyle}">
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style x:Key="BigTextStyle" TargetType="{x:Type Control}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontFamily" Value="{StaticResource FontMain}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontStretch" Value="Normal"/>
        <Setter Property="Margin" Value="4"/>
    </Style>

    <Style x:Key="BigTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BigTextStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource OrangeBrush}"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="bg" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"
                        CornerRadius="2" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MediumTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BigTextBoxStyle}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="CustomComboboxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" SnapsToDevicePixels="True"
                        Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="0" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" VerticalAlignment="Stretch">
                            <Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource OrangeLightBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                            <Setter Property="Background" TargetName="splitBorder">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFDAEBFC" Offset="0"/>
                                        <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomFlatButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource OrangeBrush}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="{StaticResource FontMain}" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="PART_Border" CornerRadius="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}, TargetNullValue={StaticResource OrangeBrush}}">
                            <ContentPresenter x:Name="PART_Content" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding }"
                                          TextElement.FontFamily="{TemplateBinding FontFamily}"
                                          TextElement.FontSize="{TemplateBinding FontSize}">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="TextWrapping" Value="Wrap"/>
                                        <Setter Property="TextAlignment" Value="Center"/>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="PART_Border" Value="{StaticResource OrangeMediumBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_Border" Value="{StaticResource GrayBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="PART_Border" Value="{StaticResource OrangeMediumLightBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_Border" Value="{StaticResource GrayBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="PART_Border" Value="{StaticResource LightGrayBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_Border" Value="{StaticResource GrayBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="PART_Content" Value="{StaticResource GrayBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="BigCustomCheckBoxTemplate" TargetType="{x:Type CheckBox}">

        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">

            <Grid.ColumnDefinitions>

                <ColumnDefinition Width="Auto"/>

                <ColumnDefinition Width="*"/>

            </Grid.ColumnDefinitions>

            <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"

                            Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"

                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="2" Width="20" Height="20">

                <Grid x:Name="markGrid">

                    <Path x:Name="optionMark" Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z" Fill="{TemplateBinding BorderBrush}" Margin="1" Opacity="0" Stretch="Fill"/>

                    <Rectangle x:Name="indeterminateMark" Fill="#FF212121" Margin="2" Opacity="0"/>

                </Grid>

            </Border>

            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Padding" Value="4,-1,0,0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OrangeLightBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFE6E6E6"/>
                <Setter Property="Fill" TargetName="optionMark" Value="#FF707070"/>
                <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF707070"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OrangeMediumLightBrush}"/>
                <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF212121"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CustomCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BigTextStyle}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OrangeBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource BigCustomCheckBoxTemplate}" />
    </Style>
</ResourceDictionary>